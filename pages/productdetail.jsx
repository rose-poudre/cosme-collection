import Head from "next/head";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { db } from "../public/src/firebase-config";
import { collection, getDocs } from "firebase/firestore";
import ProductDetailCard from "../components/ProductDetailCard";
import ChooseBrand from "../components/ChooseBrand";
import SameIngredientRecommendationCard from "../components/SameIngredientRecommendationCard";
import SameBrandRecommendationCard from "../components/SameBrandRecommendationCard";
import SameCategorySmallRecommendationCard from "../components/SameCategorySmallRecommendationCard";

const Productdetail = ({ searchResult }) => {
  const router = useRouter();
  const { img, activeIngredientName, brand, manufacture, categorySmall } =
    router.query;

  const [products, setProducts] = useState([]);
  const [recommendProducts, setRecommendedProducts] = useState([]);
  const [sameBrandProducts, setSameBrandProducts] = useState([]);
  const [sameCategorySmallProducts, setSameCategorySmallProducts] = useState(
    []
  );

  const productsCollectionRef = collection(db, "products");

  useEffect(() => {
    const getProducts = async () => {
      const data = await getDocs(productsCollectionRef);

      let product = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));
      if (img) {
        product = product.filter((output, index) => {
          return output.img.includes(img);
        });
      }
      setProducts(product);
    };
    getProducts();
  }, [router.query.img]);

  // const words1 = activeIngredientName.split("（");
  // const words2 = words1[1].split("、");
  // const words3 = words2[words2.length - 1].split("）");

  useEffect(() => {
    const getRecommendedProducts = async () => {
      const recommendedData = await getDocs(productsCollectionRef);

      let recommendedProduct = recommendedData.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      }));
      console.log(recommendedProduct);
      if (activeIngredientName) {
        recommendedProduct = recommendedProduct.filter((output, index) => {
          return output.activeIngredientName.includes(activeIngredientName);
        });
      }
      setRecommendedProducts(recommendedProduct);
    };
    getRecommendedProducts();
  }, [router.query]);

  useEffect(() => {
    const getSameBrandProducts = async () => {
      const sameBrandProductData = await getDocs(productsCollectionRef);

      let sameBrandProduct = sameBrandProductData.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      }));

      if (brand) {
        sameBrandProduct = sameBrandProduct.filter((output, index) => {
          return output.brand.includes(brand);
        });
      }
      setSameBrandProducts(sameBrandProduct);
    };
    getSameBrandProducts();
  }, [router.query]);

  useEffect(() => {
    const getSameCategorySmallProducts = async () => {
      const sameCategorySmallProductData = await getDocs(productsCollectionRef);

      let sameCategorySmallProduct = sameCategorySmallProductData.docs.map(
        (doc) => ({
          ...doc.data(),
          id: doc.id,
        })
      );
      if (categorySmall) {
        sameCategorySmallProduct = sameCategorySmallProduct.filter(
          (output, index) => {
            return output.categorySmall.includes(categorySmall);
          }
        );
      }
      setSameCategorySmallProducts(sameCategorySmallProduct);
    };
    getSameCategorySmallProducts();
  }, [router.query]);

  return (
    <div>
      <Head>
        <title>Rikejo Cosme</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <ProductCard /> */}
      <Header />

      <main className="">
        <section className="flex-grow pt-14 px-6">
          <h1 className="text-3xl font-semibold mt-2 mb-6"></h1>

          <div className="flex flex-col">
            {products.map(
              ({
                img,
                manufacture,
                brand,
                product,
                activeIngredientName,
                allIngredientName,
                categorySmall,
                price,
                capacity,
                unit,
                star_point,
                descriptionOfItem,
              }) => (
                <ProductDetailCard
                  key={img}
                  img={img}
                  manufacture={manufacture}
                  brand={brand}
                  activeIngredientName={activeIngredientName}
                  allIngredientName={allIngredientName}
                  categorySmall={categorySmall}
                  product={product}
                  price={price}
                  capacity={capacity}
                  unit={unit}
                  star_point={star_point}
                  descriptionOfItem={descriptionOfItem}
                />
              )
            )}
          </div>
        </section>
        <section className="flex-grow pt-14 px-6">
          <h2 className="text-2xl font-semibold py-8">
            「{activeIngredientName}
            」を含む商品
          </h2>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 p-3 -ml-3">
            {recommendProducts.map(
              ({
                img,
                product,
                brand,
                categorySmall,
                activeIngredientName,
              }) => (
                <SameIngredientRecommendationCard
                  key={img}
                  img={img}
                  product={product}
                  brand={brand}
                  categorySmall={categorySmall}
                  activeIngredientName={activeIngredientName}
                />
              )
            )}
          </div>
        </section>
        <section className="flex-grow pt-14 px-6">
          <h2 className="text-2xl font-semibold py-8">
            同ブランド「{brand}」の商品
          </h2>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 p-3 -ml-3">
            {sameBrandProducts.map(
              ({
                img,
                product,
                brand,
                categorySmall,
                activeIngredientName,
              }) => (
                <SameBrandRecommendationCard
                  key={img}
                  img={img}
                  brand={brand}
                  product={product}
                  categorySmall={categorySmall}
                  activeIngredientName={activeIngredientName}
                />
              )
            )}
          </div>
        </section>
        <section className="flex-grow pt-14 px-6">
          <h2 className="text-2xl font-semibold py-8">
            同カテゴリ「{categorySmall}」の商品
          </h2>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 p-3 -ml-3">
            {sameCategorySmallProducts.map(
              ({
                img,
                product,
                brand,
                categorySmall,
                activeIngredientName,
              }) => (
                <SameCategorySmallRecommendationCard
                  key={img}
                  img={img}
                  brand={brand}
                  product={product}
                  categorySmall={categorySmall}
                  activeIngredientName={activeIngredientName}
                />
              )
            )}
          </div>
        </section>
        <section className="mb-20 ml-6">
          <h2 className="text-3xl md:text-4xl font-semibold mt-10 py-8">
            ブランドから探す
          </h2>
          <div className="hidden lg:inline-flex mb-5 space-x-3 text-gray-800 whitespace-nowrap"></div>
          <ChooseBrand />
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default Productdetail;
